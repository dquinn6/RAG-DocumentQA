window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "src", "modulename": "src", "kind": "module", "doc": "<h1 id=\"retrieval-augmented-generation-rag-application-demo\">Retrieval Augmented Generation (RAG) Application Demo</h1>\n\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n\n<blockquote>\n  <p><a href=\"#bout\">About</a></p>\n</blockquote>\n\n<blockquote>\n  <blockquote>\n    <p><a href=\"#codebase-contents\">Codebase Contents</a></p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p><a href=\"#notebooks\">Notebooks</a></p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p><a href=\"#source-code\">Source Code</a></p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p><a href=\"#scripts\">Scripts</a></p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><a href=\"#getting-started\">Getting Started</a></p>\n</blockquote>\n\n<blockquote>\n  <blockquote>\n    <p><a href=\"#setup\">Setup</a></p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><a href=\"#running-the-ui-based-application\">Running the UI-based Application</a></p>\n</blockquote>\n\n<blockquote>\n  <blockquote>\n    <p><a href=\"#ui-demo\">UI Demo</a></p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <blockquote>\n    <p><a href=\"#stopping-the-program\">Stopping the program</a></p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><a href=\"#running-the-cli-based-application\">Running the CLI-based Application</a></p>\n</blockquote>\n\n<blockquote>\n  <blockquote>\n    <p><a href=\"#cli-demo\">CLI Demo</a></p>\n  </blockquote>\n</blockquote>\n\n<p><br/></p>\n\n<h2 id=\"about\">About</h2>\n\n<p>This application is a Retrieval Augmented Generation (RAG) based system using a Large Language Model (LLM) to answer questions on a supported set of documents. This demo application currently uses <a href=\"https://platform.openai.com/docs/models\">OpenAI's GPT</a> as the underlying LLM and the <a href=\"https://huggingface.co/datasets/wikitext\">WikiText2</a> dataset as a set of dummy documents to answer questions on, but the modular structure of this codebase allows the easy implementation other types of models or datasets.</p>\n\n<p>For a real use case, we would normally supply a set of private documents to the LLM that it wasn't trained on to create a practical application for users. WikiText2 is used in this application as it is open-source and provides a diverse set of documents to query on, making it a good choice for a demo application. However, GPT has already been trained on much of the content in these documents and can answer related questions without using a RAG approach. Therefore, the functionality to manipulate these documents has been incorporated to better demonstrate GPT's usage of the given information over its internal knowledge.</p>\n\n<h3 id=\"codebase-contents\">Codebase Contents:</h3>\n\n<h4 id=\"notebooks\">Notebooks:</h4>\n\n<ul>\n<li><strong>dev_RAG.ipynb</strong>: A notebook that walks through the development process for this application, including EDA, data preprocessing, and an initial POC development of the base RAG system.</li>\n<li><strong>demo_pipeline.ipynb</strong>: A notebook demonstrating how to easily create and utilize the full RAG pipeline using the developed modules in this project.</li>\n</ul>\n\n<h4 id=\"source-code\">Source Code:</h4>\n\n<ul>\n<li><strong>Project modules</strong> for the application.</li>\n<li><strong>Config yaml files</strong> for specifying run parameters.</li>\n<li><strong>Pytests</strong> for the project modules.</li>\n</ul>\n\n<h4 id=\"scripts\">Scripts:</h4>\n\n<ul>\n<li><strong>run_init.py</strong>: A script to initialize required project directories and files.</li>\n<li><strong>run_cli.py</strong>: A program script to run the base application through the command line interface (CLI).</li>\n<li><strong>run_app.py</strong>: A program script to run an enhanced version of the application through a UI, allowing for easier user interaction with the program.</li>\n</ul>\n\n<p><br/></p>\n\n<h2 id=\"getting-started\">Getting Started</h2>\n\n<h3 id=\"setup\">Setup</h3>\n\n<h4 id=\"1-install-anaconda\">1. Install Anaconda</h4>\n\n<p>Installing Anaconda is the easiest way to get Python, environments, and package managers set up on your device, providing everything you need to run this program. If not already installed, navigate to the <a href=\"https://www.anaconda.com/download\">Anaconda download page</a> and install on your device before proceeding.</p>\n\n<h4 id=\"2-create-a-new-python-environment\">2. Create a new Python environment</h4>\n\n<p>In your terminal, run the following commands to create and activate a new Python environment for this project:</p>\n\n<pre><code>conda create -n YOUR_ENV_NAME python=3.11\nconda activate YOUR_ENV_NAME\n</code></pre>\n\n<h4 id=\"3-install-this-project-as-a-package\">3. Install this project as a package</h4>\n\n<p>Navigate to the root project directory (the location of this README) and install this project as a package with the following commands:</p>\n\n<pre><code>cd PROJECT_DIR\npip install .\n</code></pre>\n\n<p>Alternatively, if you don't wish to install this project as a package (e.g. you wish to further develop the codebase), you can just install the dependencies instead:</p>\n\n<pre><code>pip install -r requirements.txt\n</code></pre>\n\n<h4 id=\"4-set-your-model-api-key\">4. Set your model API key</h4>\n\n<p>Navigate to <em>src/config/user_config.yml</em> and add your OpenAI API key next to ACCESS_TOKEN.</p>\n\n<h4 id=\"5-optional-change-other-config-parameters\">5. (Optional) Change other config parameters.</h4>\n\n<p>Change other parameters in user_config.yml if desired. However, many of these can be adjusted from the UI after starting the program. See <a href=\"#config\">Config</a> for more details on each of these parameters.</p>\n\n<p><br/></p>\n\n<h2 id=\"running-the-ui-based-application\">Running the UI-based Application</h2>\n\n<p>The program has a UI implemented with Streamlit for easily manipulating the documents, creating the vectorstore, and interacting with the RAG-enabled model. To start the app, navigate to the root project directory (here) and run the following command:</p>\n\n<pre><code>streamlit run run_app.py\n</code></pre>\n\n<p>The loaded page has a 'usage' section that describes how to use the interface; you can also see a demo usage video in the UI Demo section below. </p>\n\n<p>The default configuration will run the program in your local browser, but streamlit can be configured to be deployed on a remote server for user servicing if desired. </p>\n\n<h3 id=\"ui-demo\">UI Demo</h3>\n\n<p><img src=\"readme_images/Demo.gif\" alt=\"\" /></p>\n\n<h3 id=\"stopping-the-program\">Stopping the program</h3>\n\n<p>To stop the program, send the terminate process signal (CTRL+C) in your terminal. You can also suspend the program (CTRL+Z) and terminate the program with the command <em>'killall -9 python'</em> (Note: this command will also terminate any other Python process running; you can find the PID of this application and specify this to kill instead).</p>\n\n<p><br/></p>\n\n<h2 id=\"running-the-cli-based-application\">Running the CLI-based Application</h2>\n\n<p>If you don't wish to use the UI-based app, you can interface with the base RAG system using the command line interface via run_cli.py. This program will create the model using the config params and manipulation patterns in src/config/user_config.yml and src/config/manipulate_patterns.json. After setting your desired params for the run, use the following command to start the program:</p>\n\n<pre><code>python run_cli.py\n</code></pre>\n\n<h3 id=\"cli-demo\">CLI Demo</h3>\n\n<p><img src=\"readme_images/Demo_CLI.png\" alt=\"\" /></p>\n\n<p><br/></p>\n\n<h2 id=\"config\">Config</h2>\n\n<p>This section describes each of the config parameter fields in src/config/user_config.yml.</p>\n\n<p><strong>ACCESS_TOKEN</strong>: OpenAI API key for model access; may be expanded for other types of models in the future.</p>\n\n<p><strong>MODEL_NAME</strong>: Type of GPT model to use e.g. gpt-3.5-turbo.</p>\n\n<p><strong>DATASET_NAME</strong>: Implemented dataset name to use; currently only supports: [\"WikiText\"].</p>\n\n<p><strong>VECTORSTORE_NAME</strong>: Implemented vectorstore name to use; currently only supports: [\"LangchainFAISS\"].</p>\n\n<p><strong>SEARCH_TYPE</strong>: Type of embedding search algorithm to use for vectorstore lookup; currently only supports: [\"similarity\", \"mmr\", \"similarity_score_threshold\"].</p>\n\n<p><strong>TOKEN_LIMIT</strong>: Max number (int) of tokens to limit documents to.</p>\n\n<p><strong>N_RETRIEVED_DOCS</strong>: Number of top matching documents from retrieval to provide to model.</p>\n\n<p><strong>SAVE_PATH</strong>: Path to save run artifacts to.</p>\n\n<p><strong>LOG_PATH</strong>: Path to save program logs to.</p>\n\n<p><strong>PATTERNS_FILENAME</strong>: Path+filename to json with search:replace patterns to manipulate documents with.</p>\n\n<p><strong>VERBOSE</strong>: Show logging INFO messages.</p>\n\n<p><br/></p>\n"}, {"fullname": "src.app_helpers", "modulename": "src.app_helpers", "kind": "module", "doc": "<p>Module for UI application helper functions.</p>\n"}, {"fullname": "src.app_helpers.LOG_PATH", "modulename": "src.app_helpers", "qualname": "LOG_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;logs/&#x27;"}, {"fullname": "src.app_helpers.SAVE_PATH", "modulename": "src.app_helpers", "qualname": "SAVE_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;document_store/&#x27;"}, {"fullname": "src.app_helpers.PATTERNS_FILENAME", "modulename": "src.app_helpers", "qualname": "PATTERNS_FILENAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;src/config/manipulate_patterns.json&#x27;"}, {"fullname": "src.app_helpers.create_placeholder_files", "modulename": "src.app_helpers", "qualname": "create_placeholder_files", "kind": "function", "doc": "<p>Create initial placeholder files and directories used in other scripts.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.app_helpers.create_logger", "modulename": "src.app_helpers", "qualname": "create_logger", "kind": "function", "doc": "<p>Create a RotatingFileHandler logger for handling streamlit IO. Expects variable LOG_PATH already defined in module.</p>\n\n<p>Solution to duplicate log messages; found at <a href=\"https://discuss.streamlit.io/t/streamlit-duplicates-log-messages-when-stream-handler-is-added/16426\">https://discuss.streamlit.io/t/streamlit-duplicates-log-messages-when-stream-handler-is-added/16426</a></p>\n\n<p>Args:\n    name (str, optional): Name for logging.getLogger(). Defaults to \"logger_\".\n    level (str, optional): Logging level to display messages. Defaults to \"INFO\".\n    filename (str, optional): LOG_PATH (module variable) + filename to write log messages to. Defaults to LOG_PATH+\"streamlit.log\"\n    max_log_size (int, optional): Max size (bytes) for log file before rollover. Defaults to 1024<em>1024</em>1024.\n    backup_count (int, optional): number of old log files to maintain. Defaults to 1.</p>\n\n<p>Returns:\n    logging.Logger: Logger object for UI message logging.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;logger_&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">level</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;INFO&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;logs/streamlit.log&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">max_log_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1073741824</span>,</span><span class=\"param\">\t<span class=\"n\">backup_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.app_helpers.render_doc_viewer", "modulename": "src.app_helpers", "qualname": "render_doc_viewer", "kind": "function", "doc": "<p>Render a document viewing window in UI.</p>\n\n<p>Args:\n    docs_name (str, optional): st.session_state name holding list of docuements. Defaults to \"documents\".\n    index_name (str, optional): st.session_state name to maintain an object's current index from another. Defaults to \"current_index\".\n    include_text (Optional[str], optional): Optional text to include in the viewer. Defaults to None.\n    unique_key (str, optional): Unique key name to maintain multiple document viewers at once. Defaults to \"key\".</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">docs_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;documents&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">index_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;current_index&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">include_text</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">unique_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;key&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.app_helpers.gather_docs", "modulename": "src.app_helpers", "qualname": "gather_docs", "kind": "function", "doc": "<p>Fetch documents with specified search pattern and maintain in session states.</p>\n\n<p>Args:\n    data_processor (data_processors.DataProcessor): DataProcessor object with data.\n    communicator (communicators.Communicator): Communicator object to count tokens.\n    search_pattern (Optional[str], optional): Search string to find matches for in documents. Defaults to None.\n    replace_pattern (Optional[str], optional): String to replace search string with. Defaults to None.\n    verbose (bool, optional): Write to UI. Defaults to True.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_processor</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">data_processors</span><span class=\"o\">.</span><span class=\"n\">DataProcessor</span>,</span><span class=\"param\">\t<span class=\"n\">communicator</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">communicators</span><span class=\"o\">.</span><span class=\"n\">Communicator</span>,</span><span class=\"param\">\t<span class=\"n\">search_pattern</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">replace_pattern</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.app_helpers.get_model_factory_name", "modulename": "src.app_helpers", "qualname": "get_model_factory_name", "kind": "function", "doc": "<p>Map vendor API model names to program defined names, to differentiate between RAG and standard versions.</p>\n\n<p>Args:\n    model_name (str, optional): Model name used in vendor API. Defaults to \"gpt-3.5-turbo\".\n    rag (bool, optional): If true, maps model name to RAG version of model. Defaults to False.</p>\n\n<p>Returns:\n    Optional[str]: Program defined model if implemented, else None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gpt-3.5-turbo&#39;</span>, </span><span class=\"param\"><span class=\"n\">rag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.app_helpers.btn_lock_callback", "modulename": "src.app_helpers", "qualname": "btn_lock_callback", "kind": "function", "doc": "<p>Locks UI widgets upon a triggered event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.communicators", "modulename": "src.communicators", "kind": "module", "doc": "<p>Module containing classes for LLM API communication.</p>\n"}, {"fullname": "src.communicators.RAG_SYS_ROLE_MSG", "modulename": "src.communicators", "qualname": "RAG_SYS_ROLE_MSG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;You will answer user queries based on the context documents provided. Your responses MUST be grounded from the provided context.YOU WILL LIMIT YOUR KNOWLEDGE ONLY TO THE INFORMATION PROVIDED. YOU WILL NOT PROVIDE ANY EXTERNAL INFORMATION. If information needed to answer the user query is not in the documents provided, you will reply with &#x27;Sorry, I can&#x27;t answer that based on the provided documents&#x27;.&quot;"}, {"fullname": "src.communicators.RAG_CONTEXT_PREFACE", "modulename": "src.communicators", "qualname": "RAG_CONTEXT_PREFACE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Please use the following context to generate your response, which must not contain outside information:\\n\\n&#x27;"}, {"fullname": "src.communicators.RAG_QUERY_PREFACE", "modulename": "src.communicators", "qualname": "RAG_QUERY_PREFACE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\n\\nBased solely on the context provided above, please answer the following user query:\\n&#x27;"}, {"fullname": "src.communicators.CommunicatorError", "modulename": "src.communicators", "qualname": "CommunicatorError", "kind": "class", "doc": "<p>Custom error for Communicator objects.</p>\n", "bases": "builtins.Exception"}, {"fullname": "src.communicators.vs_required", "modulename": "src.communicators", "qualname": "vs_required", "kind": "function", "doc": "<p>Require a method to have vectorstore set before proceeding.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.communicators.Communicator", "modulename": "src.communicators", "qualname": "Communicator", "kind": "class", "doc": "<p>Base class for Communicator subclasses.</p>\n", "bases": "abc.ABC"}, {"fullname": "src.communicators.Communicator.__init__", "modulename": "src.communicators", "qualname": "Communicator.__init__", "kind": "function", "doc": "<p>Init with optional Vectorstore Handler.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">vectorstore_handler</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">vectorstore_handlers</span><span class=\"o\">.</span><span class=\"n\">VectorstoreHandler</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.communicators.Communicator.vs_hndlr", "modulename": "src.communicators", "qualname": "Communicator.vs_hndlr", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.communicators.Communicator.set_vectorstore_handler", "modulename": "src.communicators", "qualname": "Communicator.set_vectorstore_handler", "kind": "function", "doc": "<p>Set the vectorstore handler post-init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">vectorstore_handler</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">vectorstore_handlers</span><span class=\"o\">.</span><span class=\"n\">VectorstoreHandler</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.communicators.Communicator.post_prompt", "modulename": "src.communicators", "qualname": "Communicator.post_prompt", "kind": "function", "doc": "<p>Send/receive messages with LLM, whether through API post or local process.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.communicators.Communicator.count_tokens", "modulename": "src.communicators", "qualname": "Communicator.count_tokens", "kind": "function", "doc": "<p>Count tokens in text using respective LLM's tokenizer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.communicators.Communicator.post_rag_prompt", "modulename": "src.communicators", "qualname": "Communicator.post_rag_prompt", "kind": "function", "doc": "<p>Send RAG prompt and return response and retrieved context; add vs_required decorator when implementing in subclass.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.communicators.GPTCommunicator", "modulename": "src.communicators", "qualname": "GPTCommunicator", "kind": "class", "doc": "<p>Communicator subclass for communication with OpenAI GPT models.</p>\n", "bases": "Communicator"}, {"fullname": "src.communicators.GPTCommunicator.__init__", "modulename": "src.communicators", "qualname": "GPTCommunicator.__init__", "kind": "function", "doc": "<p>Init communicator object.</p>\n\n<p>Args:\n    api_key (str): OpenAI API access token\n    model_name (str, optional): GPT version to use; defaults to \"gpt-3.5-turbo\".\n    vectorstore_handler (Optional[VectorstoreHandler]): Vectorstore handler object; needed if invoking RAG method</p>\n\n<p>Raises:\n    ValueError: Raised when model_name is not a valid GPT model.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gpt-3.5-turbo&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">vectorstore_handler</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">vectorstore_handlers</span><span class=\"o\">.</span><span class=\"n\">VectorstoreHandler</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.communicators.GPTCommunicator.client", "modulename": "src.communicators", "qualname": "GPTCommunicator.client", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.communicators.GPTCommunicator.model_name", "modulename": "src.communicators", "qualname": "GPTCommunicator.model_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.communicators.GPTCommunicator.max_prompt_tokens", "modulename": "src.communicators", "qualname": "GPTCommunicator.max_prompt_tokens", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.communicators.GPTCommunicator.system_role", "modulename": "src.communicators", "qualname": "GPTCommunicator.system_role", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.communicators.GPTCommunicator.total_tokens_used", "modulename": "src.communicators", "qualname": "GPTCommunicator.total_tokens_used", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.communicators.GPTCommunicator.temperature", "modulename": "src.communicators", "qualname": "GPTCommunicator.temperature", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.communicators.GPTCommunicator.post_prompt", "modulename": "src.communicators", "qualname": "GPTCommunicator.post_prompt", "kind": "function", "doc": "<p>Send message to GPT and receivea response.</p>\n\n<p>Args:\n    text (str): Input text prompt to send to GPT.\n    truncate (bool): If true, will truncate the text to model's token limit before sending.</p>\n\n<p>Raises:\n    CommunicatorError: Raised when post to model is unsuccessful.</p>\n\n<p>Returns:\n    str: GPT's text response; None if fails.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">truncate</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.communicators.GPTCommunicator.count_tokens", "modulename": "src.communicators", "qualname": "GPTCommunicator.count_tokens", "kind": "function", "doc": "<p>Count number of tokens in a given piece of text.</p>\n\n<p>Args:\n    text (str): Input text to count tokens from.</p>\n\n<p>Raises:\n    CommunicatorError: Raised when token count is unsuccessful.</p>\n\n<p>Returns:\n    int: Token count; None if fails.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.communicators.GPTCommunicator.truncate_text", "modulename": "src.communicators", "qualname": "GPTCommunicator.truncate_text", "kind": "function", "doc": "<p>Truncate a string to a specified token limit.</p>\n\n<p>Parses by sentence period to not truncate in the middle of a sentence.\nNot necessarily a vital method for the program; will return None instead of raising error in Exception.</p>\n\n<p>Args:\n    text (str): Input text to truncate.\n    token_limit (int): Number of tokens to truncate text to.</p>\n\n<p>Returns:\n    Optional[str]: Truncated text; None if try fails.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">token_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.communicators.GPTCommunicator.post_rag_prompt", "modulename": "src.communicators", "qualname": "GPTCommunicator.post_rag_prompt", "kind": "function", "doc": "<p>Send a RAG-constructed prompt to GPT and receive response.</p>\n\n<p>Args:\n    query (str): Input question ask GPT.</p>\n\n<p>Raises:\n    CommunicatorError: Raised when RAG post is unsuccessful.</p>\n\n<p>Returns:\n    Tuple[str, List[str]]: (response from model, retrieved RAG context given to model)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_processors", "modulename": "src.data_processors", "kind": "module", "doc": "<p>Module containing classes to process data for vectorstore.</p>\n"}, {"fullname": "src.data_processors.DataProcessorError", "modulename": "src.data_processors", "qualname": "DataProcessorError", "kind": "class", "doc": "<p>Custom error for DataProcessor classes.</p>\n", "bases": "builtins.Exception"}, {"fullname": "src.data_processors.DataProcessor", "modulename": "src.data_processors", "qualname": "DataProcessor", "kind": "class", "doc": "<p>Base class for data processing into format needed for vectorstore creation.</p>\n", "bases": "abc.ABC"}, {"fullname": "src.data_processors.DataProcessor.__init__", "modulename": "src.data_processors", "qualname": "DataProcessor.__init__", "kind": "function", "doc": "<p>Init the object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "src.data_processors.DataProcessor.process_text", "modulename": "src.data_processors", "qualname": "DataProcessor.process_text", "kind": "function", "doc": "<p>Process raw data into a list of text for vectorstore creation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_processors.DataProcessor.ret_passages_with_pattern", "modulename": "src.data_processors", "qualname": "DataProcessor.ret_passages_with_pattern", "kind": "function", "doc": "<p>Return list of passages containing a text pattern.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_processors.WikiTextProcessor", "modulename": "src.data_processors", "qualname": "WikiTextProcessor", "kind": "class", "doc": "<p>DataProcessor subclass for processing data into format needed for vectorstore creation.</p>\n", "bases": "DataProcessor"}, {"fullname": "src.data_processors.WikiTextProcessor.__init__", "modulename": "src.data_processors", "qualname": "WikiTextProcessor.__init__", "kind": "function", "doc": "<p>Init object to process WikiTest dataset.</p>\n\n<p>Args:\n    dataset_version (str, optional): Dataset version matching names on HF. Defaults to \"wikitext-2-raw-v1\".\n    split (str, optional): Split of data to use. Defaults to \"train\".\n    communicator (Optional[Communicator], optional): Communicator object used for counting tokens for trimming data. Defaults to None.\n    verbose (bool, optional): Whether to diplay info messages while processing. Defaults to True.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dataset_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;wikitext-2-raw-v1&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">split</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;train&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">communicator</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">communicators</span><span class=\"o\">.</span><span class=\"n\">Communicator</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "src.data_processors.WikiTextProcessor.dataset", "modulename": "src.data_processors", "qualname": "WikiTextProcessor.dataset", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_processors.WikiTextProcessor.data", "modulename": "src.data_processors", "qualname": "WikiTextProcessor.data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_processors.WikiTextProcessor.communicator", "modulename": "src.data_processors", "qualname": "WikiTextProcessor.communicator", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_processors.WikiTextProcessor.verbose", "modulename": "src.data_processors", "qualname": "WikiTextProcessor.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_processors.WikiTextProcessor.classify_string_type", "modulename": "src.data_processors", "qualname": "WikiTextProcessor.classify_string_type", "kind": "function", "doc": "<p>Classify string as title/header/subheader/content based on the delimiters in the data.</p>\n\n<p>Args:\n    text (str): WikiText raw string.</p>\n\n<p>Raises:\n    DataProcessorError: Raised when method is unsuccessful.</p>\n\n<p>Returns:\n    Optional[str]: Title/header/subheader/content classification; None if fails</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_processors.WikiTextProcessor.transform_list_into_passages", "modulename": "src.data_processors", "qualname": "WikiTextProcessor.transform_list_into_passages", "kind": "function", "doc": "<p>Transform a list of newline strings into a list of full passage strings.</p>\n\n<p>Args:\n    text_list (List[str]): List of newline strings from dataset.</p>\n\n<p>Raises:\n    DataProcessorError: Raised when method is unsuccessful.</p>\n\n<p>Returns:\n    List[str]: List of passages</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text_list</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_processors.WikiTextProcessor.process_text", "modulename": "src.data_processors", "qualname": "WikiTextProcessor.process_text", "kind": "function", "doc": "<p>Process the initialized data from a list of text to a list of passages.</p>\n\n<p>These passages can also be manipulated by supplying a list of tuple pairs (search, replace).</p>\n\n<p>Args:\n    token_limit (Optional[int], optional): Specify token limit to filter passages. Defaults to None.\n    save_path (Optional[str], optional): Path to save to. Defaults to None.\n    save_filename (str, optional): Filename for output csv; extension is appended if not included. Defaults to \"processed_data\".\n    manipulate_pattern (Optional[List[Tuple[str, str]]], optional): An optional list of tuple str pairs to manipulate passages. Defaults to None.</p>\n\n<p>Raises:\n    DataProcessorError: Raised when method is unsuccessful.</p>\n\n<p>Returns:\n    List[str]: Processed list of passages.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">token_limit</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;processed_data&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">manipulate_pattern</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_processors.WikiTextProcessor.ret_passages_with_pattern", "modulename": "src.data_processors", "qualname": "WikiTextProcessor.ret_passages_with_pattern", "kind": "function", "doc": "<p>Return list of passages containing a search pattern.</p>\n\n<p>Args:\n    pattern (str): Pattern to search for in documents.</p>\n\n<p>Returns:\n    List[str]: Passages with matching pattern.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pattern</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.factories", "modulename": "src.factories", "kind": "module", "doc": "<p>Module containing factory constructors for other modules in this codebase.</p>\n"}, {"fullname": "src.factories.API_KEY", "modulename": "src.factories", "qualname": "API_KEY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;None&#x27;"}, {"fullname": "src.factories.MODEL_NAME", "modulename": "src.factories", "qualname": "MODEL_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;gpt-3.5-turbo&#x27;"}, {"fullname": "src.factories.SAVE_PATH", "modulename": "src.factories", "qualname": "SAVE_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;document_store/&#x27;"}, {"fullname": "src.factories.SEARCH_TYPE", "modulename": "src.factories", "qualname": "SEARCH_TYPE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;similarity&#x27;"}, {"fullname": "src.factories.N_RETRIEVED_DOCS", "modulename": "src.factories", "qualname": "N_RETRIEVED_DOCS", "kind": "variable", "doc": "<p></p>\n", "default_value": "5"}, {"fullname": "src.factories.VERBOSE", "modulename": "src.factories", "qualname": "VERBOSE", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "src.factories.PATTERNS_FILENAME", "modulename": "src.factories", "qualname": "PATTERNS_FILENAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;src/config/manipulate_patterns.json&#x27;"}, {"fullname": "src.factories.DataProcessorFactory", "modulename": "src.factories", "qualname": "DataProcessorFactory", "kind": "class", "doc": "<p>Constructor for data processing objects.</p>\n"}, {"fullname": "src.factories.DataProcessorFactory.implemented_classes", "modulename": "src.factories", "qualname": "DataProcessorFactory.implemented_classes", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;WikiText&#x27;]"}, {"fullname": "src.factories.DataProcessorFactory.create_processor", "modulename": "src.factories", "qualname": "DataProcessorFactory.create_processor", "kind": "function", "doc": "<p>Construct the data processor object based on the given name.</p>\n\n<p>Args:\n    name (str): Type of data processor to construct; must be an implemented class. Defaults to \"WikiText\".\n    communicator (Optional[Communicator], optional): Optional Communicator for token limiting. Defaults to None.\n    process_data (bool, optional): If true, process the initialized data. Defaults to True.</p>\n\n<p>Raises:\n    NotImplementedError: Raised when given a name for a class that hasn't been implemented.</p>\n\n<p>Returns:\n    DataProcessor: Object for data processing.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;WikiText&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">communicator</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">communicators</span><span class=\"o\">.</span><span class=\"n\">Communicator</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">process_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">data_processors</span><span class=\"o\">.</span><span class=\"n\">DataProcessor</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.factories.VectorstoreFactory", "modulename": "src.factories", "qualname": "VectorstoreFactory", "kind": "class", "doc": "<p>Constructor for vectorstore handler objects.</p>\n"}, {"fullname": "src.factories.VectorstoreFactory.implemented_classes", "modulename": "src.factories", "qualname": "VectorstoreFactory.implemented_classes", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;LangchainFAISS&#x27;]"}, {"fullname": "src.factories.VectorstoreFactory.attach_vectorstore", "modulename": "src.factories", "qualname": "VectorstoreFactory.attach_vectorstore", "kind": "function", "doc": "<p>Attach a vectorstore to a given Communicator object to enable RAG querying.</p>\n\n<p>Args:\n    communicator (Communicator): Communicator object to enable RAG for.\n    name (str, optional): Type of vectorstore to use. Defaults to \"LangchainFAISS\".\n    load_vectorstore (bool, optional): Whether to load vectorstore currently saved vectorstore or create new one. Defaults to True.\n    _callback (Optional[Callable], optional): Optional callback function. Defaults to None.</p>\n\n<p>Raises:\n    NotImplementedError: Raised when given a name for a class that hasn't been implemented.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">communicator</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">communicators</span><span class=\"o\">.</span><span class=\"n\">Communicator</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;LangchainFAISS&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">load_vectorstore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.factories.ModelFactory", "modulename": "src.factories", "qualname": "ModelFactory", "kind": "class", "doc": "<p>Constructor for model communicator objects.</p>\n"}, {"fullname": "src.factories.ModelFactory.implemented_classes", "modulename": "src.factories", "qualname": "ModelFactory.implemented_classes", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;GPT_3.5_TURBO&#x27;, &#x27;GPT_3.5_TURBO_RAG&#x27;, &#x27;GPT_4&#x27;, &#x27;GPT_4_RAG&#x27;]"}, {"fullname": "src.factories.ModelFactory.create_model", "modulename": "src.factories", "qualname": "ModelFactory.create_model", "kind": "function", "doc": "<p>Construct model communicator, with RAG variants if specified.</p>\n\n<p>Args:\n    model_name (str, optional): Type of model to construct, with \"_RAG\" appendage for RAG variants. Defaults to \"GPT_3.5_TURBO\".\n    dataset_name (str, optional): DataProcessor type of optional new vectorstore creation. Defaults to \"WikiText\".\n    vectorstore_name (str, optional): Vectorstore type for RAG variants. Defaults to \"LangchainFAISS\".\n    new_vectorstore (bool, optional): Whether to create a new vectorstore or load currently saved. Defaults to False.\n    _callback (Optional[Callable], optional): Optional callback function. Defaults to None.</p>\n\n<p>Raises:\n    NotImplementedError: Raised when given a name for a class that hasn't been implemented.</p>\n\n<p>Returns:\n    Communicator: Model communicator object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;GPT_3.5_TURBO&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;WikiText&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">vectorstore_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;LangchainFAISS&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">new_vectorstore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">communicators</span><span class=\"o\">.</span><span class=\"n\">Communicator</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.tests", "modulename": "src.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.tests.test_communicators", "modulename": "src.tests.test_communicators", "kind": "module", "doc": "<p>Module for testing all communicator classes.</p>\n"}, {"fullname": "src.tests.test_communicators.API_KEY", "modulename": "src.tests.test_communicators", "qualname": "API_KEY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;None&#x27;"}, {"fullname": "src.tests.test_communicators.MODEL_NAME", "modulename": "src.tests.test_communicators", "qualname": "MODEL_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;gpt-3.5-turbo&#x27;"}, {"fullname": "src.tests.test_communicators.TestGPT", "modulename": "src.tests.test_communicators", "qualname": "TestGPT", "kind": "class", "doc": "<p>Class storing all tests related to GPTCommunicator.</p>\n"}, {"fullname": "src.tests.test_communicators.TestGPT.example_string", "modulename": "src.tests.test_communicators", "qualname": "TestGPT.example_string", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;This is a sentence. This is a longer sentence. This is an even longer sentence.&#x27;"}, {"fullname": "src.tests.test_communicators.TestGPT.gpt", "modulename": "src.tests.test_communicators", "qualname": "TestGPT.gpt", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_communicators.TestGPT.test_communication", "modulename": "src.tests.test_communicators", "qualname": "TestGPT.test_communication", "kind": "function", "doc": "<p>Test send/receive with GPT.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gpt</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">communicators</span><span class=\"o\">.</span><span class=\"n\">GPTCommunicator</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_communicators.TestGPT.test_raises_exception_on_rag_without_vs", "modulename": "src.tests.test_communicators", "qualname": "TestGPT.test_raises_exception_on_rag_without_vs", "kind": "function", "doc": "<p>Test exception is raised when invoking post_rag_prompt() without initialized vectorstore.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gpt</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">communicators</span><span class=\"o\">.</span><span class=\"n\">GPTCommunicator</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_communicators.TestGPT.test_raises_exception_on_bad_name", "modulename": "src.tests.test_communicators", "qualname": "TestGPT.test_raises_exception_on_bad_name", "kind": "function", "doc": "<p>Test exception is raised when giving an unsupported model name to class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">communicators</span><span class=\"o\">.</span><span class=\"n\">GPTCommunicator</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_communicators.TestGPT.test_token_count", "modulename": "src.tests.test_communicators", "qualname": "TestGPT.test_token_count", "kind": "function", "doc": "<p>Test token count produces expected values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gpt</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">communicators</span><span class=\"o\">.</span><span class=\"n\">GPTCommunicator</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_communicators.TestGPT.test_truncate", "modulename": "src.tests.test_communicators", "qualname": "TestGPT.test_truncate", "kind": "function", "doc": "<p>Test text is truncated below given token limit.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gpt</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">communicators</span><span class=\"o\">.</span><span class=\"n\">GPTCommunicator</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_data_processors", "modulename": "src.tests.test_data_processors", "kind": "module", "doc": "<p>Module for testing all data processor classes.</p>\n"}, {"fullname": "src.tests.test_data_processors.API_KEY", "modulename": "src.tests.test_data_processors", "qualname": "API_KEY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;None&#x27;"}, {"fullname": "src.tests.test_data_processors.MODEL_NAME", "modulename": "src.tests.test_data_processors", "qualname": "MODEL_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;gpt-3.5-turbo&#x27;"}, {"fullname": "src.tests.test_data_processors.TestWikiTextProcessor", "modulename": "src.tests.test_data_processors", "qualname": "TestWikiTextProcessor", "kind": "class", "doc": "<p>Class storing all tests related to WikiText DataProcessor.</p>\n"}, {"fullname": "src.tests.test_data_processors.TestWikiTextProcessor.example_string", "modulename": "src.tests.test_data_processors", "qualname": "TestWikiTextProcessor.example_string", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;New York State Route&#x27;"}, {"fullname": "src.tests.test_data_processors.TestWikiTextProcessor.processor", "modulename": "src.tests.test_data_processors", "qualname": "TestWikiTextProcessor.processor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_data_processors.TestWikiTextProcessor.test_string_classify", "modulename": "src.tests.test_data_processors", "qualname": "TestWikiTextProcessor.test_string_classify", "kind": "function", "doc": "<p>Test processor correctly classifies above strings based on the delimiter format observed in the dataset.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">processor</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">data_processors</span><span class=\"o\">.</span><span class=\"n\">WikiTextProcessor</span>,</span><span class=\"param\">\t<span class=\"n\">string_with_delimiter</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">expected</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_data_processors.TestWikiTextProcessor.test_pattern_match", "modulename": "src.tests.test_data_processors", "qualname": "TestWikiTextProcessor.test_pattern_match", "kind": "function", "doc": "<p>Test passages returned from pattern matching actually contain the specified str.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">processor</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">data_processors</span><span class=\"o\">.</span><span class=\"n\">WikiTextProcessor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_data_processors.TestWikiTextProcessor.test_passage_manipulation", "modulename": "src.tests.test_data_processors", "qualname": "TestWikiTextProcessor.test_passage_manipulation", "kind": "function", "doc": "<p>Test passages are properly manipulated some another str.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">processor</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">data_processors</span><span class=\"o\">.</span><span class=\"n\">WikiTextProcessor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_factories", "modulename": "src.tests.test_factories", "kind": "module", "doc": "<p>Module for testing all data processor classes.</p>\n"}, {"fullname": "src.tests.test_factories.API_KEY", "modulename": "src.tests.test_factories", "qualname": "API_KEY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;None&#x27;"}, {"fullname": "src.tests.test_factories.TestFactories", "modulename": "src.tests.test_factories", "qualname": "TestFactories", "kind": "class", "doc": "<p>Class storing all tests related to factory constructors.</p>\n"}, {"fullname": "src.tests.test_factories.TestFactories.communicator", "modulename": "src.tests.test_factories", "qualname": "TestFactories.communicator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_factories.TestFactories.test_factory_create_wikitext_processor", "modulename": "src.tests.test_factories", "qualname": "TestFactories.test_factory_create_wikitext_processor", "kind": "function", "doc": "<p>Test WikiText DataProcessor object is properly created from factory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">communicator</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">communicators</span><span class=\"o\">.</span><span class=\"n\">GPTCommunicator</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_factories.TestFactories.test_factory_attach_vectorstore", "modulename": "src.tests.test_factories", "qualname": "TestFactories.test_factory_attach_vectorstore", "kind": "function", "doc": "<p>Test communicator is able to post RAG prompt after attaching vectorstore with factory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">communicator</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">communicators</span><span class=\"o\">.</span><span class=\"n\">GPTCommunicator</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_factories.TestFactories.test_factory_create_model", "modulename": "src.tests.test_factories", "qualname": "TestFactories.test_factory_create_model", "kind": "function", "doc": "<p>Test factory properly creates a non-RAG model to communicate with.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_factories.TestFactories.test_factory_create_rag_model", "modulename": "src.tests.test_factories", "qualname": "TestFactories.test_factory_create_rag_model", "kind": "function", "doc": "<p>Test factory properly creates a RAG model to communicate with.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_factories.TestFactories.test_bad_name", "modulename": "src.tests.test_factories", "qualname": "TestFactories.test_bad_name", "kind": "function", "doc": "<p>Test NotImplementedError is raised for each factory when given a bad name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">communicator</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">communicators</span><span class=\"o\">.</span><span class=\"n\">GPTCommunicator</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_utils", "modulename": "src.tests.test_utils", "kind": "module", "doc": "<p>Module for testing all utility functions.</p>\n"}, {"fullname": "src.tests.test_utils.PATTERNS_FILENAME", "modulename": "src.tests.test_utils", "qualname": "PATTERNS_FILENAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;src/config/manipulate_patterns.json&#x27;"}, {"fullname": "src.tests.test_utils.test_update_user_config", "modulename": "src.tests.test_utils", "qualname": "test_update_user_config", "kind": "function", "doc": "<p>Test config.yml is properly updated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_utils.test_update_patterns_config", "modulename": "src.tests.test_utils", "qualname": "test_update_patterns_config", "kind": "function", "doc": "<p>Test manipulate patterns json is properly updated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_vectorstore_handlers", "modulename": "src.tests.test_vectorstore_handlers", "kind": "module", "doc": "<p>Module for testing all vectorstore classes.</p>\n"}, {"fullname": "src.tests.test_vectorstore_handlers.API_KEY", "modulename": "src.tests.test_vectorstore_handlers", "qualname": "API_KEY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;None&#x27;"}, {"fullname": "src.tests.test_vectorstore_handlers.SAVE_PATH", "modulename": "src.tests.test_vectorstore_handlers", "qualname": "SAVE_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;document_store/&#x27;"}, {"fullname": "src.tests.test_vectorstore_handlers.MODEL_NAME", "modulename": "src.tests.test_vectorstore_handlers", "qualname": "MODEL_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;gpt-3.5-turbo&#x27;"}, {"fullname": "src.tests.test_vectorstore_handlers.TestVectorstoreHandlerFAISS", "modulename": "src.tests.test_vectorstore_handlers", "qualname": "TestVectorstoreHandlerFAISS", "kind": "class", "doc": "<p>Class storing all tests for FAISS vectorstore handler.</p>\n"}, {"fullname": "src.tests.test_vectorstore_handlers.TestVectorstoreHandlerFAISS.test_filename", "modulename": "src.tests.test_vectorstore_handlers", "qualname": "TestVectorstoreHandlerFAISS.test_filename", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;test_data.csv&#x27;"}, {"fullname": "src.tests.test_vectorstore_handlers.TestVectorstoreHandlerFAISS.test_vs_path", "modulename": "src.tests.test_vectorstore_handlers", "qualname": "TestVectorstoreHandlerFAISS.test_vs_path", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;document_store/test/&#x27;"}, {"fullname": "src.tests.test_vectorstore_handlers.TestVectorstoreHandlerFAISS.example_string", "modulename": "src.tests.test_vectorstore_handlers", "qualname": "TestVectorstoreHandlerFAISS.example_string", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;New York State Route&#x27;"}, {"fullname": "src.tests.test_vectorstore_handlers.TestVectorstoreHandlerFAISS.vs", "modulename": "src.tests.test_vectorstore_handlers", "qualname": "TestVectorstoreHandlerFAISS.vs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_vectorstore_handlers.TestVectorstoreHandlerFAISS.communicator", "modulename": "src.tests.test_vectorstore_handlers", "qualname": "TestVectorstoreHandlerFAISS.communicator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_vectorstore_handlers.TestVectorstoreHandlerFAISS.test_create_and_retrieve", "modulename": "src.tests.test_vectorstore_handlers", "qualname": "TestVectorstoreHandlerFAISS.test_create_and_retrieve", "kind": "function", "doc": "<p>Test vectorstore is created properly and can retrieve docs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">vectorstore_handlers</span><span class=\"o\">.</span><span class=\"n\">VectorstoreHandler</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_vectorstore_handlers.TestVectorstoreHandlerFAISS.test_load_and_retrieve", "modulename": "src.tests.test_vectorstore_handlers", "qualname": "TestVectorstoreHandlerFAISS.test_load_and_retrieve", "kind": "function", "doc": "<p>Test vectorstore is loaded properly and can retrieve docs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">vectorstore_handlers</span><span class=\"o\">.</span><span class=\"n\">VectorstoreHandler</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tests.test_vectorstore_handlers.TestVectorstoreHandlerFAISS.test_text_chunking", "modulename": "src.tests.test_vectorstore_handlers", "qualname": "TestVectorstoreHandlerFAISS.test_text_chunking", "kind": "function", "doc": "<p>Test documents are chunked properly to given size.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">vs</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">vectorstore_handlers</span><span class=\"o\">.</span><span class=\"n\">VectorstoreHandler</span>,</span><span class=\"param\">\t<span class=\"n\">communicator</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">communicators</span><span class=\"o\">.</span><span class=\"n\">GPTCommunicator</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.utils", "modulename": "src.utils", "kind": "module", "doc": "<p>Module containing utility functions used throughout the codebase.</p>\n"}, {"fullname": "src.utils.LOG_PATH", "modulename": "src.utils", "qualname": "LOG_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;logs/&#x27;"}, {"fullname": "src.utils.PATTERNS_FILENAME", "modulename": "src.utils", "qualname": "PATTERNS_FILENAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;src/config/manipulate_patterns.json&#x27;"}, {"fullname": "src.utils.create_empty_file", "modulename": "src.utils", "qualname": "create_empty_file", "kind": "function", "doc": "<p>Create an empty placeholder file; creates file directory if it doesn't exist.</p>\n\n<p>Args:\n    filepath (str): File path + name to create</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.utils.update_config_yml", "modulename": "src.utils", "qualname": "update_config_yml", "kind": "function", "doc": "<p>Update program config.yml with new values.</p>\n\n<p>Args:\n    new_config (dict): Update dict, where key matches one in current config.yml and value is val to update to.</p>\n\n<p>Raises:\n    ValueError: Raised when new_config contains an unknown key.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.utils.update_patterns_json", "modulename": "src.utils", "qualname": "update_patterns_json", "kind": "function", "doc": "<p>Update the search and replace patterns json with new values.</p>\n\n<p>Args:\n    search_key (Optional[str], optional): Search key value. Defaults to None.\n    replace_val (Optional[str], optional): Replace key value. Defaults to None.\n    clear_json (bool, optional): If true, clears json to empty dict. Defaults to False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">search_key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">replace_val</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">clear_json</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.utils.test_communication", "modulename": "src.utils", "qualname": "test_communication", "kind": "function", "doc": "<p>Test communication with model using a short message.</p>\n\n<p>Args:\n    communicator (Communicator): Communicator object for sending messages to model.</p>\n\n<p>Raises:\n    CommunicatorError: Raised if communication failed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">communicator</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">communicators</span><span class=\"o\">.</span><span class=\"n\">Communicator</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.utils.manipulate_passages", "modulename": "src.utils", "qualname": "manipulate_passages", "kind": "function", "doc": "<p>Manipulate list of text with a search and replace pattern. If search pattern is not in test, it is returned unmodified.</p>\n\n<p>Not necessarily a vital method for the program; will return None instead of raising error in Exception.</p>\n\n<p>Args:\n    passages (List[str]): List of text to manipulate.\n    replace_pattern (str): A tuple pair, where the first element is the search pattern and the second element is the replae pattern.\n    verbose (bool, optional): Display logging info messages. Defaults to True.</p>\n\n<p>Returns:\n    Optional[List[str]]: List of manipulated passages</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">passages</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">replace_pattern</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.vectorstore_handlers", "modulename": "src.vectorstore_handlers", "kind": "module", "doc": "<p>Module containing classes to handle the creation, loading, and retrieval from our vectorstore of given documents.</p>\n"}, {"fullname": "src.vectorstore_handlers.VectorstoreError", "modulename": "src.vectorstore_handlers", "qualname": "VectorstoreError", "kind": "class", "doc": "<p>Custom error for vectorstore handlers.</p>\n", "bases": "builtins.Exception"}, {"fullname": "src.vectorstore_handlers.VectorstoreHandler", "modulename": "src.vectorstore_handlers", "qualname": "VectorstoreHandler", "kind": "class", "doc": "<p>Base class for handling vector store functionality.</p>\n", "bases": "abc.ABC"}, {"fullname": "src.vectorstore_handlers.VectorstoreHandler.__init__", "modulename": "src.vectorstore_handlers", "qualname": "VectorstoreHandler.__init__", "kind": "function", "doc": "<p>Init the object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "src.vectorstore_handlers.VectorstoreHandler.create_local_vectorstore", "modulename": "src.vectorstore_handlers", "qualname": "VectorstoreHandler.create_local_vectorstore", "kind": "function", "doc": "<p>Generate a vectorstore index from a set of docs and writes to local file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.vectorstore_handlers.VectorstoreHandler.load_local_vectorstore", "modulename": "src.vectorstore_handlers", "qualname": "VectorstoreHandler.load_local_vectorstore", "kind": "function", "doc": "<p>Load the currently saved local vectorstore index.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.vectorstore_handlers.VectorstoreHandler.retrieve_top_documents", "modulename": "src.vectorstore_handlers", "qualname": "VectorstoreHandler.retrieve_top_documents", "kind": "function", "doc": "<p>Retrieve top document matches for RAG prompting.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.vectorstore_handlers.LangchainVectorstoreFAISS", "modulename": "src.vectorstore_handlers", "qualname": "LangchainVectorstoreFAISS", "kind": "class", "doc": "<p>Langchain implementation of FAISS vectorstore index.</p>\n", "bases": "VectorstoreHandler"}, {"fullname": "src.vectorstore_handlers.LangchainVectorstoreFAISS.__init__", "modulename": "src.vectorstore_handlers", "qualname": "LangchainVectorstoreFAISS.__init__", "kind": "function", "doc": "<p>Initialize the FAISS vectorstore object.</p>\n\n<p>Args:\n    embedding_type (langchain_community.embeddings, optional): Type of embedding algorithm to use. Defaults to HuggingFaceEmbeddings.\n    processed_csv_path (str, optional): Path to processed data to use for vectorstore. Defaults to \"processed_data.csv\".\n    verbose (bool, optional): Display logging info messages. Defaults to True.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\tembedding_type: langchain_core.embeddings.embeddings.Embeddings = &lt;class &#x27;langchain_community.embeddings.huggingface.HuggingFaceEmbeddings&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">processed_csv_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;processed_data.csv&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "src.vectorstore_handlers.LangchainVectorstoreFAISS.data", "modulename": "src.vectorstore_handlers", "qualname": "LangchainVectorstoreFAISS.data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.vectorstore_handlers.LangchainVectorstoreFAISS.embedding_type", "modulename": "src.vectorstore_handlers", "qualname": "LangchainVectorstoreFAISS.embedding_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.vectorstore_handlers.LangchainVectorstoreFAISS.verbose", "modulename": "src.vectorstore_handlers", "qualname": "LangchainVectorstoreFAISS.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.vectorstore_handlers.LangchainVectorstoreFAISS.vectorstore", "modulename": "src.vectorstore_handlers", "qualname": "LangchainVectorstoreFAISS.vectorstore", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.vectorstore_handlers.LangchainVectorstoreFAISS.retriever", "modulename": "src.vectorstore_handlers", "qualname": "LangchainVectorstoreFAISS.retriever", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.vectorstore_handlers.LangchainVectorstoreFAISS.load_csv_file", "modulename": "src.vectorstore_handlers", "qualname": "LangchainVectorstoreFAISS.load_csv_file", "kind": "function", "doc": "<p>Load the CSV data using Langchain's loader.</p>\n\n<p>Args:\n    file_path (str): Path to processed CSV data.\n    shuffle (bool, optional): Shuffle the data. Defaults to True.\n    seed (Optional[int, optional): Random seed for shuffle. Defaults to None.</p>\n\n<p>Returns:\n    Document: Data from CSV loader.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">shuffle</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">langchain_core</span><span class=\"o\">.</span><span class=\"n\">documents</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Document</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.vectorstore_handlers.LangchainVectorstoreFAISS.chunk_data", "modulename": "src.vectorstore_handlers", "qualname": "LangchainVectorstoreFAISS.chunk_data", "kind": "function", "doc": "<p>Chunk the data to specified chunk size using RecursiveCharacterTextSplitter.</p>\n\n<p>Args:\n    chunk_size (int, optional): Token size to chunk data to. Defaults to 2048.\n    chunk_overlap (int, optional): Token overlap between chunks. Defaults to 50.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2048</span>, </span><span class=\"param\"><span class=\"n\">chunk_overlap</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.vectorstore_handlers.LangchainVectorstoreFAISS.create_local_vectorstore", "modulename": "src.vectorstore_handlers", "qualname": "LangchainVectorstoreFAISS.create_local_vectorstore", "kind": "function", "doc": "<p>Create a new local vectorstore index.</p>\n\n<p>Args:\n    save_path (str): Path to save vectorstore index to.\n    force_create (bool, optional): Forces creation of vectostore and avoid 'already found; load instead?' check. Defaults to False.\n    callback (Optional[Callable], optional): Optional callback function. Defaults to None.</p>\n\n<p>Raises:\n    ValueError: Raised when given invalid input for 'already found; load instead?' check.\n    VectorstoreError: Raised when vectorstore creation was unsuccessful.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">force_create</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.vectorstore_handlers.LangchainVectorstoreFAISS.load_local_vectorstore", "modulename": "src.vectorstore_handlers", "qualname": "LangchainVectorstoreFAISS.load_local_vectorstore", "kind": "function", "doc": "<p>Load previously generated local vectorstore index.</p>\n\n<p>Args:\n    load_path (str): Path to local vectorstore.</p>\n\n<p>Raises:\n    FileNotFoundError: Raised when index cannot be found at load_path.\n    VectorstoreError: Raised when vectorstore load was unsuccessful.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">load_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.vectorstore_handlers.LangchainVectorstoreFAISS.create_retriever", "modulename": "src.vectorstore_handlers", "qualname": "LangchainVectorstoreFAISS.create_retriever", "kind": "function", "doc": "<p>Create document retriever object for vectorstore.</p>\n\n<p>Args:\n    search_type (str, optional): Algorithm to use when searching for related documents. Defaults to \"similarity\".\n    search_kwargs (Optional[dict], optional): Retriever kwargs, which can include 'k' for number of retrieved docs. Defaults to None.</p>\n\n<p>Raises:\n    VectorstoreError: Raised when vectorstore was initialized but never loaded/created.\n    ValueError: Raised when given an invalid arg for search_type.\n    VectorstoreError: Raised when retriever creation was unsuccessful.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">search_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;similarity&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">search_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.vectorstore_handlers.LangchainVectorstoreFAISS.retrieve_top_documents", "modulename": "src.vectorstore_handlers", "qualname": "LangchainVectorstoreFAISS.retrieve_top_documents", "kind": "function", "doc": "<p>Use retriever to fetch top k matching documents for RAG.</p>\n\n<p>Args:\n    query (str): Query to search documents against.</p>\n\n<p>Raises:\n    VectorstoreError: Raised when retriever was never created.</p>\n\n<p>Returns:\n    Optional[List[str]]: List of retrieved documents for RAG.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();